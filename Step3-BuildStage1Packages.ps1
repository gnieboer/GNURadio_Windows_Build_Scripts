# GNURadio Windows Build System
#
# Geof Nieboer
#
# NOTES:
# Each module is designed to be run independently, so sometimes variables
# are set redundantly.  This is to enable easier debugging if one package needs to be re-run
#

# script setup
$ErrorActionPreference = "Stop"

# setup helper functions and variables
if ($script:MyInvocation.MyCommand.Path -eq $null) {
	$mypath = "."
} else {
	$mypath =  Split-Path $script:MyInvocation.MyCommand.Path
}
if (Test-Path $mypath\Setup.ps1) {
	. $mypath\Setup.ps1 -Force
} else {
	. $root\scripts\Setup.ps1 -Force
}
$mm = GetMajorMinor($gnuradio_version)
$env:_CL_ = ""
$env:_LINK_ = ""

# Build packages needed for Stage 1
cd src-stage1-dependencies

# ____________________________________________________________________________________________________________
# libusb
#

SetLog "libusb"
cd $root\src-stage1-dependencies\libusb\msvc
if ((TryValidate "../x64/Release/dll/libusb-1.0.dll" "../x64/Release/lib/libusb-1.0.lib" ) -eq $false) {
	Write-Host -NoNewline "building libusb..."
	Write-Host -NoNewline "Release..."
	msbuild .\libusb_2015.sln /m /p:"configuration=Release;platform=x64" >> $Log
	Validate "../x64/Release/dll/libusb-1.0.dll" "../x64/Release/lib/libusb-1.0.lib" 
} else {
	Write-Host "libusb already built"
}

# ____________________________________________________________________________________________________________
# libpng 
# uses zlib but incorporates the source directly so doesn't need to be built after zlib
SetLog "libpng"
cd $root\src-stage1-dependencies\libpng\projects\vstudio-vs2015
if ((TryValidate "x64/Release/libpng16.dll") -eq $false) {
	Write-Host -NoNewline "building libpng..."
	msbuild vstudio.sln /m /p:"configuration=Release;platform=x64" >> $Log
	Validate "x64/Release/libpng16.dll" 
} else {
	Write-Host "libpng already built"
}

# ____________________________________________________________________________________________________________
# zlib
SetLog "zlib"
Write-Host -NoNewline "Building zlib..."
cd $root\src-stage1-dependencies\zlib-1.2.8/contrib/vstudio/vc14
if ((TryValidate "x64/ZlibDllRelease/zlibwapi.dll" "x64/ZlibDllReleaseWithoutAsm/zlibwapi.dll" "x64/ZlibStatRelease/zlib.lib" "x64/ZlibStatReleaseWithoutAsm/zlib.lib") -eq $false) {
	msbuild zlibvc.sln /m /p:"configuration=Release;platform=x64" >> $Log
	msbuild zlibvc.sln /m /p:"configuration=ReleaseWithoutAsm;platform=x64" >> $Log
	Validate "x64/ZlibDllRelease/zlibwapi.dll" "x64/ZlibDllReleaseWithoutAsm/zlibwapi.dll" "x64/ZlibStatRelease/zlib.lib" "x64/ZlibStatReleaseWithoutAsm/zlib.lib"
} else {
	Write-Host "already built"
}

# __________________________________________________________________
# get-text / libiconv / libintl
#
SetLog "gettext"
Write-Host -NoNewline "building gettext..."
cd $root\src-stage1-dependencies\gettext-msvc
if ((TryValidate "x64/ReleaseDLL/libiconv.dll" "x64/Release/libiconv.lib" ) -eq $false) {
	msbuild .\gettext.sln /p:"configuration=Release;platform=x64" >> $Log
	msbuild .\gettext.sln /p:"configuration=ReleaseDLL;platform=x64" >> $Log
	Validate "x64/ReleaseDLL/libiconv.dll" "x64/Release/libiconv.lib"
	"complete"
} else {
	"already built"
}

# __________________________________________________________________
# libxml2
# must be after libiconv
#
SetLog "libxml2"
Write-Host -NoNewline "building libxml2..."
cd $root\src-stage1-dependencies\libxml2\win32
if ((TryValidate "..\build\X64\Release\lib\libxml2.lib" "..\build\X64\Release\bin\libxml2.dll" ) -eq $false) {
	# libxml is looking for slightly different filename than what is generated by default
	cp ..\..\gettext-msvc\x64\Release\libiconv.lib ..\..\gettext-msvc\x64\Release\iconv.lib
	cp ..\..\zlib-1.2.8\contrib\vstudio\vc14\x64\ZlibStatRelease\zlib.lib ..\..\zlib-1.2.8\contrib\vstudio\vc14\x64\ZlibStatRelease\zlibstat.lib

	$ErrorActionPreference = "Continue"
	# the "static" option builds the test programs statically link, not relevant to the libraries
	& cscript.exe configure.js iconv=yes compiler=msvc zlib=yes python=yes cruntime=/MD  debug=no prefix="..\build\x64\Release" static=no lib="..\..\gettext-msvc\x64\Release;..\..\zlib-1.2.8\contrib\vstudio\vc14\x64\ZLibStatRelease" include="..\..\gettext-msvc\libiconv-1.14;..\..\zlib-1.2.8" *>> $Log
	nmake Makefile.msvc libxml install *>> $Log
	nmake clean *>> $Log
	Validate "..\build\X64\Release\lib\libxml2.lib" "..\build\X64\Release\bin\libxml2.dll" 
	$ErrorActionPreference = "Stop"
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# libxslt 1.1.29
#
# uses libxml, zlib, and iconv
# TODO PATCH REQUIRED, has option NOWIN98 l
SetLog "libxslt"
Write-Host "building libxslt..."
$ErrorActionPreference = "Continue"
cd $root\src-stage1-dependencies\libxslt-$libxslt_version\win32
Write-Host -NoNewline "  Release..."
if ((TryValidate "..\build\Release\lib\libxslt.dll" "..\build\Release\lib\libxslt_a.lib") -eq $false) {
	& nmake /NOLOGO clean *>> $Log 
	Write-Host -NoNewline "configuring..."
	& cscript configure.js zlib=yes compiler=msvc cruntime="/MD" static=yes prefix=..\build\Release include="../../zlib-1.2.8;../../libxml2/include;../../gettext-msvc/libiconv-1.14" lib="../../libxml2/build/x64/Release/lib;../../gettext-msvc/x64/Release;../../zlib-1.2.8/contrib/vstudio/vc14/x64/ZlibStatRelease" debug=no *>> $Log 
	Write-Host -NoNewline "building..." 
	& nmake /NOLOGO *>> $Log 
	Write-Host -NoNewline "installing..."
	& nmake /NOLOGO install *>> $Log 
	if (Test-Path ..\build\Release\bin\libexslt.pdb) {Copy-Item -Path ..\build\Release\bin\libexslt.pdb ..\build\$configuration\lib}
	if (Test-Path ..\build\Release\bin\libxslt.pdb) {Copy-Item -Path ..\build\Release\bin\libxslt.pdb ..\build\$configuration\lib}
	Validate "..\build\Release\lib\libxslt.dll" "..\build\Release\lib\libxslt_a.lib"
} else {
	Write-Host "already built"
}


$ErrorActionPreference = "Stop"

# ____________________________________________________________________________________________________________
# GTK
#
# GTK is pre-built due to the complexities in a windows 64 environment.
# below is the command line used to build gtk3 using the gvsbuild code on github.  Similar to these scripts, there be dragons and some manual tweaking is required, not for the faint of heart.
# $pythonroot/python.exe ./build.py build --vs-ver 14 -p x64 -c release --build-dir z:\gr-build\src-stage1-dependencies\gvsbuild\build --msys-dir z:/gr-build/msys64 --patches-root-dir z:/gr-build/src-stage1-dependencies/gvsbuild/patches --python-dir $pythonroot --py-wheel --enable-gi --win-sdk-ver 10.0.15063.0 gtk3-full

# ____________________________________________________________________________________________________________
# SDL
SetLog "SDL"
Write-Host -NoNewline "building SDL..."
cd $root\src-stage1-dependencies\sdl-$sdl_version\VisualC
if ((TryValidate "x64/Release/SDL.dll") -eq $false) {
	msbuild .\sdl.sln /m /p:"configuration=Release;platform=x64" >> $Log
	Validate "x64/Release/SDL.dll" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# portaudio
SetLog "portaudio"
Write-Host -NoNewline "building portaudio..."
cd $root\src-stage1-dependencies\portaudio\build\msvc
if ((TryValidate "x64/Release/portaudio_x64.dll" "x64/Release-Static/portaudio.lib") -eq $false) {
	msbuild .\portaudio.vcxproj /m /p:"configuration=Release;platform=x64" >> $Log
	msbuild .\portaudio.vcxproj /m /p:"configuration=Release-Static;platform=x64" >> $Log
	Validate  "x64/Release/portaudio_x64.dll" "x64/Release-Static/portaudio.lib"
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# cppunit
SetLog "cppunit"
Write-Host -NoNewline "building cppunit..."
cd $root\src-stage1-dependencies\cppunit-$cppunit_version\src >> $Log
if ((TryValidate "x64/Release/dll/cppunit.dll" "x64/Release/lib/cppunit.lib") -eq $false) {
	msbuild .\CppUnitLibraries.sln /m /p:"configuration=Release;platform=x64" >> $Log
	Validate "x64/Release/dll/cppunit.dll" "x64/Release/lib/cppunit.lib"
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# fftw3
SetLog "fftw3"
Write-Host -NoNewline "building fftw3..."
$env:_CL_ = ""
$env:_LINK_ = ""
cd $root\src-stage1-dependencies\fftw-$fftw_version\msvc
if ((TryValidate "x64/Release/libfftwf-3.3.lib" "x64/Release DLL/libfftwf-3.3.DLL" ) -eq $false) {
	msbuild .\fftw-3.3-libs.sln /m /p:"configuration=Release;platform=x64" >> $Log
	msbuild .\fftw-3.3-libs.sln /m /p:"configuration=Release DLL;platform=x64" >> $Log
	Validate "x64/Release/libfftwf-3.3.lib" "x64/Release DLL/libfftwf-3.3.DLL"  
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# openssl 
#
# required by Qt5 currently (this may be re-configurable)
#
SetLog "openssl"
Write-Host -NoNewline "building openssl..."
cd $root/src-stage1-dependencies/openssl
# The TEST target will not only build but also test
# Note, it appears the static libs are still linked to the /MT runtime
# don't change config names because they are linked to python's config names below
if ((TryValidate "build/x64/Release/ssleay32.lib" "build/x64/ReleaseDLL/libeay32.DLL" "build/x64/Release/libeay32.lib" "build/x64/ReleaseDLL/ssleay32.DLL"  ) -eq $false) {
	msbuild openssl.vcxproj /m /t:"Build" /p:"configuration=Release;platform=x64" >> $Log
	msbuild openssl.vcxproj /m /t:"Build" /p:"configuration=ReleaseDLL;platform=x64" >> $Log
	Validate "build/x64/Release/ssleay32.lib" "build/x64/ReleaseDLL/libeay32.DLL" "build/x64/Release/libeay32.lib" "build/x64/ReleaseDLL/ssleay32.DLL"
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# python (boost depends on this)
# 
# Patch Notes:
# Need to manually include a pyconfig.h file for Win64
# Need to manually include all python headers
# Need to manually include python37.lib
# Python 3.8 has a new DLL search methodology which doesn't work well with the file structure used here for GTK, so stick with 3.7
# ._pth variable will also cause issues as it overrides the default search order, so don't copy it (might be able to use it in final build though)
#
SetLog "python"
Write-Host -NoNewline "staging core python..."
New-Item -ItemType Directory -Force -Path $pythonroot >> $Log
if ($false) {
	cd $root\packages\python-$python_version-amd64
	$command = "$root\packages\python-$python_version-amd64\python-$python_version-amd64.exe /passive InstallAllUsers=0 DefaultJustForMeTargetDir=""$pythonroot"" TargetDir=""$pythonroot"" AssociateFiles=0 Include_exe=1 Shortcuts=0 Include_dev=1 CompileAll=1 PrependPath=0 Include_doc=0 Include_debug=0 Include_launcher=0 Include_lib=1 Include_pip=1 Include_test=0"
	Invoke-Expression $command 
 } else {
	cd $root/src-stage1-dependencies/python-$python_version
	New-Item -ItemType Directory -Force -Path $pythonroot >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/DLLs >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/libs >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/lib >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/include >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/Scripts >> $Log
	New-Item -ItemType Directory -Force -Path $pythonroot/lib/site-packages >> $Log
	$env:Path = $pythonroot+ ";$oldPath"

	# copy the files
	# amd64 for regular build (release and debug combined), amd64-avx for release AVX2 build
	if (Test-Path .\python_d.exe) {cp python_d.exe $pythonroot} 
	if (Test-Path .\pythonw_d.exe) {cp pythonw_d.exe $pythonroot}
	if (Test-Path .\python$pyver_d.dll) {cp python$pyver_d.dll $pythonroot}
	cp python.exe $pythonroot
	cp pythonw.exe $pythonroot
	cp python$pyver.dll $pythonroot
	cp python3.dll $pythonroot
	cp python$pyver.zip $pythonroot
	cp LICENSE.txt $pythonroot
	cp *.pyd $pythonroot/DLLs
	cp *.dll $pythonroot/DLLs
	cp *.lib $pythonroot/libs
	cp *.h $pythonroot/include
	robocopy include $pythonroot/include /e >> $Log
	# then install key packages needed immediately
	$env:Path = "$pythonroot;$pythonroot/Dlls"+ ";$oldPath"
	$env:PYTHONPATH="$pythonroot;$pythonroot/DLLs;$pythonroot/Lib/site-packages"
    $env:PYTHONHOME="$pythonroot"
	cd $pythonroot
	curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  >> $Log
	& $pythonroot/$pythonexe get-pip.py --no-warn-script-location >> $Log
	$env:Path = $oldPath
}
Validate "$pythonroot/python.exe"

# ____________________________________________________________________________________________________________
# boost
SetLog "boost"
Write-Host -NoNewline "building boost..."
cd $root/src-stage1-dependencies/boost
$ErrorActionPreference = "Continue"
$boostbase = $boost_version_.substring(0,$boost_version_.length-2)
if ((TryValidate "build/x64/Release/lib/boost_python$pyver-vc142-mt-x64-$boostbase.dll" "build/x64/Release/lib/boost_system-vc142-mt-x64-$boostbase.dll" ) -eq $false) {
	cmd.exe /c "bootstrap.bat msvc" *>> $Log
	# point boost build to our custom python libraries
	$doubleroot = $root -replace "\\", "\\"
	Add-Content .\project-config.jam "`nusing python : $pverdot : $doubleroot\\src-stage2-python\\gr-python$pyver\\python.exe : $doubleroot\\src-stage2-python\\gr-python$pyver\\Include : $doubleroot\\src-stage2-python\\gr-python$pyver\\Libs ;" *>> $Log
	# always rebuild all because boost will reuse objects from a previous build with different command line options
	# Optimized static+shared release libraries
	$cores = Get-WmiObject -class win32_processor -Property "numberOfCores" 
	$corestr = $cores.NumberOfCores
	# Regular  static+shared release libraries
	cmd.exe /c "b2.exe -j$corestr -a --build-type=minimal --prefix=build\x64\Release --libdir=build\x64\Release\lib --includedir=build\x64\Release\include --stagedir=build\x64\Release --layout=versioned address-model=64 threading=multi link=static,shared variant=release cxxflags="" -FS"" cflags="" -FS"" install" *>> $Log
	Validate "build/x64/Release/lib/boost_python$pyver-vc142-mt-x64-$boostbase.dll" "build/x64/Release/lib/boost_system-vc142-mt-x64-$boostbase.dll" 
} else {
	Write-Host "already built"
}
$ErrorActionPreference = "Stop"

# ____________________________________________________________________________________________________________
# libsodium
# must be before libzmq
SetLog "libsodium"
Write-Host -NoNewline "building libsodium..."
cd $root/src-stage1-dependencies/libsodium
if ((TryValidate "bin/x64/Release/v140/dynamic/libsodium.dll" "bin/x64/Release/v140/static/libsodium.lib" "bin/x64/Release/v140/ltcg/libsodium.lib" ) -eq $false) {
	cd builds\msvc\build
	& .\buildbase.bat ..\vs2015\libsodium.sln 14 >> $Log
	cd ../../../bin/x64
	Validate "Release/v140/dynamic/libsodium.dll" "Release/v140/static/libsodium.lib" "Release/v140/ltcg/libsodium.lib" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# libzmq
# must be after libsodium
SetLog "libzmq"
Write-Host -NoNewline "building libzmq..."
cd $root/src-stage1-dependencies/libzmq
$libzmquv = $libzmq_version -Replace '\.','_'
if ((TryValidate "./bin/Release/bin/libzmq-v140-mt-$libzmquv.dll" "./bin/Release/lib/libzmq-v140-mt-$libzmquv.lib" "./bin/Release/lib/libzmq-v140-mt-s-$libzmquv.lib" ) -eq $false) {
	New-Item -ItemType Directory -Force $root\src-stage1-dependencies\libzmq\build *>> $Log 
	cd build
	Write-Host -NoNewline "  Release...configuring..."
	cmake ..\ `
		-Wno-dev `
		-G $cmakeGenerator -A x64 `
		-DCMAKE_BUILD_TYPE="Release" `
		-DCMAKE_INSTALL_PREFIX="$root/src-stage1-dependencies/libzmq/bin/Release/" *>> $Log 
	Write-Host -NoNewline "building..."
	msbuild ".\ZeroMQ.sln" /m /p:"configuration=Release;platform=x64" *>> $Log 
	Write-Host -NoNewline "installing..."
	msbuild .\INSTALL.vcxproj /m /p:"configuration=Release;platform=x64;BuildProjectReferences=false" *>> $Log
	$env:_CL_ = ""
	Validate "../bin/Release/bin/libzmq-v140-mt-$libzmquv.dll" "../bin/Release/lib/libzmq-v140-mt-$libzmquv.lib" "../bin/Release/lib/libzmq-v140-mt-s-$libzmquv.lib" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# gsl
SetLog "gsl"
Write-Host -NoNewline "building gsl..."
cd $root/src-stage1-dependencies/gsl-$gsl_version/build.vc14
if ((TryValidate "x64/Release/dll/gsl.dll" "x64/Release/dll/cblas.dll" "x64/Release/lib/gsl.lib" "x64/Release/lib/cblas.lib"  ) -eq $false) {
	#prep headers
	msbuild gsl.lib.sln /t:gslhdrs >> $Log
	#static
	msbuild gsl.lib.sln /m /t:cblaslib /t:gsllib /maxcpucount /p:"configuration=Release;platform=x64"  >> $Log
	#dll
	msbuild gsl.dll.sln /m /t:cblasdll /t:gsldll /maxcpucount /p:"configuration=Release;platform=x64"  >> $Log
	Validate "x64/Release/dll/gsl.dll" "x64/Release/dll/cblas.dll" "x64/Release/lib/gsl.lib" "x64/Release/lib/cblas.lib" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# Qt5
#
# used by GNURadio (as of 3.8) and is used by gqrx 
# needs openssl and python
#
SetLog "Qt5"
Write-Host "building Qt5..."
Write-Host -NoNewline "  ReleaseDLL...configuring..."
cd $root/src-stage1-dependencies/Qt5
if ((TryValidate "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/qmake.exe" "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/Qt5Core.dll" "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/Qt5OpenGL.dll" "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/Qt5Svg.dll" "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/Qt5Gui.dll") -eq $false) {
	# Various things in Qt build are intepreted as errors so 
	$ErrorActionPreference = "Continue"
	$env:QTDIR = "$root/src-stage1-dependencies/Qt5"
	New-Item -ItemType Directory -Force -Path $root/src-stage1-dependencies/Qt5Build *>> $Log
	New-Item -ItemType Directory -Force -Path $root/src-stage1-dependencies/Qt5Stage *>> $Log
	cd $root/src-stage1-dependencies/Qt5Build

	if (Test-Path  $root/src-stage1-dependencies/Qt5/build/ReleaseDLL) {rm -r -Force $root/src-stage1-dependencies/Qt5/build/ReleaseDLL}
	New-Item -ItemType Directory -Force -Path $root/src-stage1-dependencies/Qt5Build/build/ReleaseDLL >> $Log
	New-Item -ItemType Directory -Force -Path $root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL >> $Log
	cd $root/src-stage1-dependencies/Qt5Build/build/ReleaseDLL
	$env:QMAKESPEC = ""
	$env:XQMAKESPEC = ""
	$env:QMAKEPATH = ""
	$env:QMAKEFEATURES = ""
	$env:OPENSSL_LIBDIR="$root\src-stage1-dependencies\openssl\build\x64\Release" 
	$env:OPENSSL_INCDIR="$root\src-stage1-dependencies\openssl\build\x64\Release\include" 
	$env:OPENSSL_LIBS='-lssleay32 -llibeay32'
	$env:_CL_ = " /DCBOR_NO_HALF_FLOAT_TYPE " # CBOR uses an intrinsic not available in MSVC 2015
	../../../Qt5/configure.bat -release -shared -prefix $root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL `
		-skip qtconnectivity -skip qtscript -skip qtcanvas3d -skip qtdoc -skip qtserialbus -skip qtserialport `
		-skip qtwebview -skip qtactiveqt -skip qtandroidextras -skip qtwebsockets -skip qtwebengine -skip qtwebchannel -skip qtxmlpatterns `
		-skip qtlocation -skip qtgamepad -skip qtnetworkauth -skip qtspeech -skip qtwayland -skip qtmacextras -skip qtremoteobjects `
		-nomake examples -nomake tools -nomake tests `
		-platform win32-msvc -opensource -confirm-license -sse2 -ltcg -directwrite -mp -qt-libpng -qt-libjpeg -opengl dynamic `
		-skip qtnetwork  *>> $Log
	Write-Host -NoNewline "building..."
	nmake *>> $Log
	Write-Host -NoNewline "installing..."
	nmake install *>> $Log
	$env:_CL_ = ""
	cd $root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL
	Validate "bin/qmake.exe" "bin/Qt5Core.dll" "bin/Qt5OpenGL.dll" "bin/Qt5Svg.dll" "bin/Qt5Gui.dll"
} else {
	Write-Host "already built"
}
$env:Path = $oldPath
$ErrorActionPreference = "Stop"

# ____________________________________________________________________________________________________________
# QWT 6
#
SetLog "Qwt6"
Write-Host -NoNewline "building qwt6..."
cd $root\src-stage1-dependencies\qwt-$qwt6_version
if ((TryValidate "build/x64/ReleaseDLL/lib/qwt6.dll" ) -eq $false) {
	$ErrorActionPreference = "Continue"
	$env:QMAKESPEC = "win32-msvc"
	$env:QTDIR = "$root/src-stage1-dependencies/Qt5"
	New-Item -Force -ItemType Directory build/x64  *>> $Log  
	
	# Release DLL
	$env:_CL_ = " /Zi /EHsc "
	$env:_LINK_ = ""
	$env:LIB = "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/lib;$root/src-stage1-dependencies/Qt5Stage/build/DebugDLL/lib;" + $oldlib
	$command = "qwt.pro ""INSTALL_PREFIX=$root/src-stage1-dependencies/qwt-$qwt6_version/build/x64/ReleaseDLL"" ""CONFIG-=debug"" ""CONFIG+=release_with_debuginfo"" ""MAKEDLL=YES"" ""AVX2=NO"" ""QT_DLL=YES"""

	Write-Host -NoNewLine "ReleaseDLL..."
	$env:Path = "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin;C:\Program Files (x86)\Windows Kits\10\bin\x64;" + $oldPath
	$command = "$root/src-stage1-dependencies/Qt5Stage/build/ReleaseDLL/bin/qmake.exe $command"
	Invoke-Expression $command *>> $Log
	nmake /NOLOGO release *>>  $Log
	nmake /NOLOGO install *>> $Log
	$env:Path = $oldPath

	$env:_CL_ = ""
	$env:LIB = $oldlib
	$ErrorActionPreference = "Stop"
	cd $root\src-stage1-dependencies\qwt-$qwt6_version
	Validate "build/x64/ReleaseDLL/lib/qwt6.dll"  
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# QwtPlot3D
#
# requires Qt4 or custom OpenGL version of Qt5 
#
# 
SetLog "QwtPlot3d"
$configuration = "Release"
cd $root\src-stage1-dependencies\qwtplot3d
Write-Host -NoNewline "building QwtPlot3d $configuration..."
if ((TryValidate "build/$configuration/qwtplot3d.dll") -eq $false) {
	New-Item -Force -ItemType Directory build/$configuration  *>> $Log  
	$buildconfig="Release"
	$configDLL = $configuration + "DLL"
	$debug = ""
	$env:QMAKESPEC = "win32-msvc"
	$env:QTDIR = "$root/src-stage1-dependencies/Qt5Stage/build/$configDLL/"
	$env:_CL_ = " /Fdbuild/$configuration/qwtplot3d.pdb /I$root/src-stage1-dependencies/zlib-1.2.8 /I$root/src-stage1-dependencies/Qt5Stage/build/$configDLL/include/QtCore /D_M_X64 /D_WIN64 /UQT_NO_DYNAMIC_CAST /GR /EHsc /Zi "
	$env:_LINK_ = " /LIBPATH:""$root\src-stage1-dependencies\zlib-1.2.8\contrib\vstudio\vc14\x64\ZlibStat$configuration"" /LIBPATH:""$root/src-stage1-dependencies/Qt5Stage/build/$configDLL/lib"" /LTCG  "
	$env:Path = "${env:ProgramFiles(x86)}\Microsoft Visual Studio 14.0\VC\bin\amd64;$root\src-stage1-dependencies\Qt5Stage\build\$configDLL\bin;" +  $oldPath
	$ErrorActionPreference = "Continue"
	& qmake.exe qwtplot3d.pro "CONFIG += zlib"  *>> $Log  
	# this invocation of qmake seems to get confused about what version of msvc to build for so we need to manually upgrade
	devenv qwtplot3d.vcxproj /Upgrade *>> $Log  
	msbuild .\qwtplot3d.vcxproj /m /p:"configuration=$buildconfig;platform=x64" *>> $Log  
	Move-Item -Force lib/qwtplot3d.lib build/$configuration
	Move-Item -Force lib/qwtplot3d.dll build/$configuration
	Move-Item -Force lib/qwtplot3d.exp build/$configuration
	Remove-Item Backup -Recurse  
	Remove-Item UpgradeLog.htm 
	Validate "build/$configuration/qwtplot3d.dll"
	$env:_CL_ = " "
	$env:_LINK_ = ""
	$env:Path = $oldPath
} else {
	Write-Host "already built"
}


# ____________________________________________________________________________________________________________
# Mako
# Mako is a python-only package can be installed automatically
# used by UHD drivers
#
PipInstall "mako" "$pythonroot/lib/site-packages/mako/__init__.py"

# ____________________________________________________________________________________________________________
# Requests
# Requests is a python-only package can be installed automatically
# used by UHD helper script that downloads the UHD firmware images in step 8
#
PipInstall "Requests" "$pythonroot/lib/site-packages/Requests/__init__.py"

#__________________________________________________________________________________________
# numpy
#
# Right now 1.19.4 is completely broken on windows.  This forces 1.19.3, but later packages request the latest as dependencies so 
# for the moment a manual reinstall is required prior to Step7.  This will likely only last until January 2021-ish
#
PipInstall "numpy==1.19.3" "$pythonroot/lib/site-packages/numpy/__init__.py"

# ____________________________________________________________________________________________________________
# UHD 
#
# requires libusb, boost, python, mako, numpy
# FYI BOOST_FORCE_SYMMETRIC_OPERATORS is required for debug versions because MSVC 2015 disables NRVO for debug builds which causes duplicate operator error

SetLog "UHD"
Write-Host "building uhd..."
$ErrorActionPreference = "Continue"
cd $root\src-stage1-dependencies\uhd\host
New-Item -ItemType Directory -Force -Path .\build  *>> $Log
cd build 
$configuration = "Release"
if ((TryValidate "..\..\dist\$configuration\bin\uhd.dll" "..\..\dist\$configuration\lib\uhd.lib" "..\..\dist\$configuration\include\uhd.h") -eq $false) {
	Write-Host -NoNewline "  configuring $configuration..."
	if ($configuration -match "AVX2") {$platform = "avx2"; $env:_CL_ = "/arch:AVX2 "} else {$platform = "x64"; $env:_CL_ = ""}
	if ($configuration -match "Release") 
		{$boostconfig = "Release"; $buildconfig="RelWithDebInfo"; $env:_CL_ = $env:_CL_ + " /MD "} 
	else 
		{$boostconfig = "Debug"; $buildconfig="Debug"; $env:_CL_ = $env:_CL_ + " /MDd "}
	$linkflags= " /DEBUG  /NODEFAULTLIB:LIBCMT.lib /NODEFAULTLIB:LIBCMTD.lib "
	$env:Path = "$pythonroot;$pythonroot/Dlls"+ ";$oldPath"
	$env:PYTHONPATH="$pythonroot;$pythonroot/DLLs;$pythonroot/Lib/site-packages"
    $env:PYTHONHOME="$pythonroot"
	& cmake .. `
		-G $cmakeGenerator -A x64 `
		-DPYTHON_EXECUTABLE="$pythonroot\$pythonexe" `
		-DCMAKE_SHARED_LINKER_FLAGS=" $linkflags " `
		-DCMAKE_EXE_LINKER_FLAGS=" $linkflags " `
		-DCMAKE_STATIC_LINKER_FLAGS=" $linkflags " `
		-DCMAKE_MODULE_LINKER_FLAGS=" $linkflags  " `
		-DCMAKE_CXX_FLAGS=" /DBOOST_FORCE_SYMMETRIC_OPERATORS /DBOOST_BIND_NO_PLACEHOLDERS /EHsc " `
		-DBoost_INCLUDE_DIR="$root/src-stage1-dependencies/boost/build/$platform/$boostconfig/include/boost-$boostbase" `
		-DBoost_LIBRARY_DIR="$root/src-stage1-dependencies/boost/build/$platform/$boostconfig/lib" `
		-DLIBUSB_INCLUDE_DIRS="$root/src-stage1-dependencies/libusb/libusb" `
		-DLIBUSB_LIBRARIES="$root/src-stage1-dependencies/libusb/x64/$configuration/lib/libusb-1.0.lib" *>> $Log 
	Write-Host -NoNewline "building..."
	msbuild .\UHD.sln /m /p:"configuration=$buildconfig;platform=x64" *>> $Log 
	Write-Host -NoNewline "installing..."
	& cmake -DCMAKE_INSTALL_PREFIX="$root/src-stage1-dependencies/uhd\dist\$configuration" -DBUILD_TYPE="$buildconfig" -P cmake_install.cmake *>> $Log
	New-Item -ItemType Directory -Path $root/src-stage1-dependencies/uhd\dist\$configuration\share\uhd\examples\ -Force *>> $Log
	cp -Recurse -Force $root/src-stage1-dependencies/uhd/host/build/examples/$buildconfig/* $root/src-stage1-dependencies/uhd\dist\$configuration\share\uhd\examples\
	Validate "..\..\dist\$configuration\bin\uhd.dll" "..\..\dist\$configuration\lib\uhd.lib" "..\..\dist\$configuration\include\uhd.h"
} else {
	Write-Host "  $configuration already built"
}
$env:_CL_ = ""
	
# ____________________________________________________________________________________________________________
# pthreads
#
SetLog "pthreads"
Write-Host "building pthreads..."
$ErrorActionPreference = "Continue"
$env:_CL_ = ""
cd $root\src-stage1-dependencies\pthreads\pthreads.2
if ((TryValidate "x64\Release\pthreadVC2.lib" "x64\ReleaseDLL\pthreadVC2.dll" ) -eq $false) {
	Write-Host -NoNewline "Release..."
	msbuild .\pthread.sln /m /p:"configuration=Release;platform=x64" >> $Log
	Write-Host -NoNewline "DLL..."
	msbuild .\pthread.sln /m /p:"configuration=ReleaseDLL;platform=x64" >> $Log
	Validate "x64\Release\pthreadVC2.lib" "x64\ReleaseDLL\pthreadVC2.dll" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# openblas
#
# Note that openblas will be slow as the assembly code is not used because it's not in MSVC format
# TODO upgrade openblas asm format
# openblas lapack and lapacke have a ton of external errors during build
# TODO build patch for modified CMAKE
# TODO we will always build this for now because gr-specest and Armadillo also would need to point to MKL and right now they don't
if (!$BuildNumpyWithMKL -or $true) {
	SetLog "openblas"
	Write-Host "building openblas..."
	$ErrorActionPreference = "Continue"
	$configuration =  "Release"
	if ($configuration -match "Debug") {$cmakebuildtype = "Debug"; $debug="ON"} else {$cmakebuildtype = "Release"; $debug="OFF"}
	if ($configuration -match "AVX2") {$env:_CL_ = " -D__64BIT__ /arch:AVX2 "} else {$env:_CL_ = " -D__64BIT__ "}
	Write-Host -NoNewline "  configuring $configuration..."
	New-Item -ItemType Directory -Force $root\src-stage1-dependencies\OpenBLAS-$openblas_version\build\$configuration *>> $Log 
	cd $root\src-stage1-dependencies\openblas-$openblas_version\build\$configuration
	if ((TryValidate "lib\libopenblas.lib" "lib\libopenblas.dll" "lib\libopenblas_static.lib") -eq $false) {
		cmake ..\..\ `
			-Wno-dev `
			-G $cmakeGenerator -A x64 `
			-DTARGET="HASWELL" `
			-DBUILD_DEBUG="$debug" `
			-DF_COMPILER="INTEL" `
			-DCMAKE_Fortran_COMPILER="ifort" `
			-DCMAKE_Fortran_FLAGS=" /assume:underscore /names:lowercase " `
			-DNO_LAPACKE="1" `
			-DNO_LAPACK="1"  *>> $Log 
		$env:__INTEL_POST_FFLAGS = " /assume:underscore /names:lowercase "
		Write-Host -NoNewline "building..."
		msbuild .\OpenBLAS.sln /m /p:"configuration=$cmakebuildtype;platform=x64" *>> $Log 
		cp $root\src-stage1-dependencies\OpenBLAS-$openblas_version\build\$configuration\lib\$cmakebuildtype\libopenblas.lib $root\src-stage1-dependencies\OpenBLAS-$openblas_version\build\$configuration\lib\libopenblas_static.lib *>> $Log 

		Validate "lib\libopenblas.lib" "lib\libopenblas.dll" "lib\libopenblas_static.lib"
		$ErrorActionPreference = "Stop"
	} else {
		Write-Host "already built"
	}
	$env:_CL_ = ""
	$env:__INTEL_POST_FFLAGS = ""
}

# ____________________________________________________________________________________________________________
# lapack
#
# like scipy, this requires a fortran compiler to be installed, and gfortran doesn't work well with MSVC
# so there isn't a free option, we look for Intel Fortran Compiler during setup.
# Don't despair though, if not fort then we'll just download binary wheels later.
#
# This is no longer required for scipy/numpy, it is only required for gr-specest which also requires a fortran compiler
#
if (!$BuildNumpyWithMKL -and $hasIFORT) {
	SetLog "lapack"
	Write-Host "building lapack..."
	$ErrorActionPreference = "Continue"
	$configuration = "Release"
	if ($configuration -match "Debug") {$cmakebuildtype = "Debug"} else {$cmakebuildtype = "Release"}
	if ($configuration -match "AVX2") {$env:_CL_ = " /arch:AVX2 "} else {$env:_CL_ = ""}
	Write-Host -NoNewline "  configuring $configuration..."
	New-Item -ItemType Directory -Force $root\src-stage1-dependencies\lapack\build\$configuration *>> $Log 
	cd $root\src-stage1-dependencies\lapack\build\$configuration
	if ((TryValidate "../../dist/$configuration/lib/blas.lib" "../../dist/$configuration/lib/lapack.lib") -eq $false) {
		cmake ..\..\ `
			-Wno-dev `
			-G $cmakeGenerator -A x64 `
			-DCMAKE_BUILD_TYPE="$cmakebuildtype" `
			-DPYTHON_EXECUTABLE="$pythonroot\$pythonexe" `
			-DCMAKE_INSTALL_PREFIX="$root/src-stage1-dependencies/lapack/dist/$configuration/" `
			-DCMAKE_Fortran_FLAGS=" /assume:underscore /names:lowercase " *>> $Log 
		$env:__INTEL_POST_FFLAGS = " /assume:underscore /names:lowercase "
		Write-Host -NoNewline "building..."
		# use devenv instead of msbuild because of vfproj files unsupported by msbuild
		devenv .\lapack.sln /project lapack /rebuild "$cmakebuildtype|x64"  *>> $Log 
		devenv .\lapack.sln /project blas /rebuild "$cmakebuildtype|x64"  *>> $Log 
		Write-Host -NoNewline "packaging..."
		# don't run the INSTALL vcproj because it will fail because the dependencies won't link
		cmake -DBUILD_TYPE="$cmakebuildtype" -P cmake_install.cmake *>> $Log 
		$env:_CL_ = ""
		$env:__INTEL_POST_FFLAGS = ""
		Validate "../../dist/$configuration/lib/blas.lib" "../../dist/$configuration/lib/lapack.lib"
	} else {
		Write-Host "already built"
	}
}

# ____________________________________________________________________________________________________________
# mbedtls (polarssl)
#
Write-Host "building mbedtls..."
SetLog "mbedtls (polarssl)"
$ErrorActionPreference = "Continue"
$env:_LINK_ = ""
function MakembedTLS {
	$ErrorActionPreference = "Continue"
	$configuration = $args[0]
	if ($configuration -match "Debug") {$cmakebuildtype = "Debug"; $debug="Debug"} else {$cmakebuildtype = "Release"; $debug="RelWithDebInfo"}
	if ($configuration -match "AVX2") {$env:_CL_ = " /arch:AVX2 "} else {$env:_CL_ = ""}
	if ($configuration -match "DLL") {$DLL = "ON"} else {$DLL = "OFF"}
	Write-Host -NoNewline "  configuring $configuration..."
	New-Item -ItemType Directory -Force $root\src-stage1-dependencies\mbedtls-mbedtls-$mbedtls_version\build\$configuration *>> $Log 
	cd $root\src-stage1-dependencies\mbedtls-mbedtls-$mbedtls_version\build\$configuration
	if (((TryValidate "..\..\dist\$configuration\lib\mbedtls.dll") -eq $false -and ($DLL -eq "ON")) -or `
		((TryValidate "..\..\dist\$configuration\lib\mbedtls.lib") -eq $false)) {
		cmake ..\..\ `
			-Wno-dev `
			-G $cmakeGenerator -A x64 `
			-DENABLE_TESTING="ON" `
			-DCMAKE_BUILD_TYPE="$cmakebuildtype" `
			-DUSE_SHARED_MBEDTLS_LIBRARY="$DLL" `
			-DCMAKE_INSTALL_PREFIX="$root/src-stage1-dependencies/mbedtls-mbedtls-$mbedtls_version/dist/$configuration/" *>> $Log 
		Write-Host -NoNewline "building..."
		msbuild ".\mbed TLS.sln" /m /p:"configuration=$debug;platform=x64" *>> $Log 
		Write-Host -NoNewline "installing..."
		msbuild .\INSTALL.vcxproj /m /p:"configuration=$debug;platform=x64;BuildProjectReferences=false" *>> $Log
		if ($configuration -match "DLL") {
			Validate "..\..\dist\$configuration\lib\mbedtls.lib" "..\..\dist\$configuration\lib\mbedtls.dll" 
		} else {
			Validate "..\..\dist\$configuration\lib\mbedtls.lib"
		}
	} else {
		Write-Host "already built"
	}
	$env:_CL_ =
	$ErrorActionPreference = "Stop"
}
MakembedTLS "Release"
MakembedTLS "ReleaseDLL"
	
# ____________________________________________________________________________________________________________
# log4cpp
# log utility library used in GNURadio 3.8+

SetLog "log4cpp"
Write-Host -NoNewline "Building log4cpp..."
cd $root\src-stage1-dependencies\log4cpp\msvc14
if ((TryValidate "x64/Release/log4cpp.dll" "x64/Release/log4cpp.pdb"  "x64/Release/log4cpp.lib" ) -eq $false) {
	# Right now this is completely failing with a VS 2019 msbuild
	# configuration.  The project will not build using MSBuild or devenv command lines, but
	# will build easily if opened in the GUI.  Upgrading project format has no effect
	# the error is "fatal error C1083: Cannot open source file: 'Stop': No such file or directory"
	# It appears to be attempting to build a file called Stop instead of using Stop as a directive indicating the end of the list of files to be compiled. 
	# I have no idea why this is occuring only on this project file
	# must be something in the format of the project file XML and probably the custom build command but have not found anything.
	# will troubleshoot later but the the time being will manually compile this and press on.
	msbuild log4cpp/log4cpp.vcxproj /m /p:"configuration=Release;platform=x64" >> $Log
	Validate "x64/Release/log4cpp.dll" "x64/Release/log4cpp.pdb"  "x64/Release/log4cpp.lib" 
} else {
	Write-Host "already built"
}

# ____________________________________________________________________________________________________________
# MPIR
#

SetLog "MPIR"
Write-Host -NoNewline "Building MPIR..."
cd $root\src-stage1-dependencies\mpir\build.vc14 
if ((TryValidate "../dll/x64/Release/mpir.dll" "../dll/x64/Release/mpir.lib"  "../dll/x64/Release/mpir.pdb" `
	"../lib/x64/Release/mpirxx.lib" "../lib/x64/Release/mpir.lib"  "../lib/x64/Release/mpir.pdb" ) -eq $false) {
	$env:_CL_ = "/MD"
	./msbuild.bat gc dll x64 release *>> $Log
	./msbuild.bat gc lib x64 release *>> $Log
	./msbuild.bat cxx lib x64 release *>> $Log
	$env:_CL_ = ""
	Validate "../dll/x64/Release/mpir.dll" "../dll/x64/Release/mpir.lib"  "../dll/x64/Release/mpir.pdb" `
	"../lib/x64/Release/mpirxx.lib" "../lib/x64/Release/mpir.lib"  "../lib/x64/Release/mpir.pdb"
} else {
	Write-Host "already built"
}


cd $root/scripts

""
"COMPLETED STEP 3: Core Win32 dependencies have been built"
""